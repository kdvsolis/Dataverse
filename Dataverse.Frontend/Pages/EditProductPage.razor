@page "/products/edit/{id}"

@using System.Net.Http.Json;
@using Dataverse.Frontend.Models;
@using System.Text.Json;
@using System.Text;
@using System.Net.Http;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Edit Product</h3>

<EditForm Model="product">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="Name">Name</label>
        <InputText id="Name" class="form-control" @bind-Value="product.Name" />
        <ValidationMessage For="() => product.Name" />
    </div>
    <div class="form-group">
        <label for="Description">Description</label>
        <InputText id="Description" class="form-control" @bind-Value="product.Description" />
        <ValidationMessage For="() => product.Description" />
    </div>
    <div class="form-group">
        <label for="Price">Price</label>
        <InputNumber id="Price" class="form-control" @bind-Value="product.Price" />
        <ValidationMessage For="() => product.Price" />
    </div>
    <button class="btn btn-primary" @onclick="UpdateProduct">Save</button>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    private Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch the product data from the backend based on the provided Id
            product = await HttpClient.GetFromJsonAsync<Product>($"api/products/{Id}");

            if (product == null)
            {
                NavigationManager.NavigateTo("/products");
            }
        }
        catch (HttpRequestException)
        {
        }
    }

    private async Task UpdateProduct()
    {
        // Create a HttpRequestMessage for the PUT request
        var request = new HttpRequestMessage(HttpMethod.Put, $"api/products/{Id}");

        // Serialize the product object to JSON and set it as the request content
        var jsonContent = JsonSerializer.Serialize(product);
        request.Content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

        // Send the request and get the response
        var response = await HttpClient.SendAsync(request); // Use await here

        if (response.IsSuccessStatusCode)
        {
            // Product updated successfully, navigate back to the product list page
            NavigationManager.NavigateTo("/products");
        }
        else
        {
            // Handle the case where the update was not successful
            // You can display an error message or take other actions based on the response
            // For example:
            // var errorMessage = await response.Content.ReadAsStringAsync();
            // ShowErrorMessage("Failed to update the product: " + errorMessage);
        }
    }
}
